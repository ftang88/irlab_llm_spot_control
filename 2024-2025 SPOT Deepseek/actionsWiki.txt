/robot_command
This action is a thin layer on top of Boston Dynamics' RobotCommand. This action is a "sledgehammer", almost anything you want to do with the robot can be achieved via the robot command action -- walking, posing the body, manipulation, gripping, etc. The caveat is the request has a lot of fields and can be difficult to fill out manually. The request field is generated from the protobuf via the bosdyn_msgs package (run ros2 interface show spot_msgs/action/RobotCommand to see just how complex it is!).

The easiest way to fill out this request properly is to first generate the protobuf using BD's robot command builder tool, then convert it to the desired ROS message using a conversion function from the bosdyn_msgs package.

from bosdyn_msgs.conversions import convert
from bosdyn_msgs.msg import RobotCommand
...
proto_robot_command = ... # generate this using BD's protos
ros_robot_command = RobotCommand()
convert(proto_robot_command, ros_robot_command)
# then you can use this to fill out the action request
If a robot command action is sent while another robot command action is executing, the currently executing command will be cancelled, and the latest requested command will begin to execute.

The Spot SDK internally cannot handle long trajectories. The action server implemented in this driver will handle trajectory batching so that very long trajectories can be executed on robot. See the batch_trajectory example for a trajectory that could not be executed by the base spot-sdk but can be executed through the robot command action client.

/manipulation
This action is a thin wrapper on BD's ManipulationApiRequest. Similarly to the robot command action, this action's request is autogenerated from BD protobufs, and it is easiest to fill it in using the conversion functions.

/navigate_to
This is a graph nav action to command the robot to navigate to a specific waypoint ID.

/trajectory
This requests the robot to move to a desired target pose. As implemented, the target pose specified must be in the "body" frame. Run ros2 interface show spot_msgs/action/Trajectory for more information on how to fill out this request.
